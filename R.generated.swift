// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `Calendar1`.
    static let calendar1 = ImageResource(bundle: _R.hostingBundle, name: "Calendar1")
    /// Image `Calendar2`.
    static let calendar2 = ImageResource(bundle: _R.hostingBundle, name: "Calendar2")
    /// Image `ico_back`.
    static let ico_back = ImageResource(bundle: _R.hostingBundle, name: "ico_back")
    /// Image `ico_back_black`.
    static let ico_back_black = ImageResource(bundle: _R.hostingBundle, name: "ico_back_black")
    /// Image `ico_star`.
    static let ico_star = ImageResource(bundle: _R.hostingBundle, name: "ico_star")
    /// Image `ico_star_selected`.
    static let ico_star_selected = ImageResource(bundle: _R.hostingBundle, name: "ico_star_selected")
    /// Image `List`.
    static let list = ImageResource(bundle: _R.hostingBundle, name: "List")
    /// Image `Map`.
    static let map = ImageResource(bundle: _R.hostingBundle, name: "Map")
    /// Image `Time`.
    static let time = ImageResource(bundle: _R.hostingBundle, name: "Time")
    
    /// `UIImage(named: "Calendar1", bundle: ..., traitCollection: ...)`
    static func calendar1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.calendar1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Calendar2", bundle: ..., traitCollection: ...)`
    static func calendar2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.calendar2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ico_back", bundle: ..., traitCollection: ...)`
    static func ico_back(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ico_back, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ico_back_black", bundle: ..., traitCollection: ...)`
    static func ico_back_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ico_back_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ico_star", bundle: ..., traitCollection: ...)`
    static func ico_star(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ico_star, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ico_star_selected", bundle: ..., traitCollection: ...)`
    static func ico_star_selected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ico_star_selected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "List", bundle: ..., traitCollection: ...)`
    static func list(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.list, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.map, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.time, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `EventCell`.
    static let eventCell = _R.nib._EventCell()
    
    /// `UINib(name: "EventCell", bundle: ...)`
    static func eventCell(_: Void) -> UINib {
      return UINib(resource: R.nib.eventCell)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "com.alienxp03.Meetapp") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _EventCell: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "EventCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EventCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? EventCell
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UITabBarController
      
      let bundle = _R.hostingBundle
      let eventDetails = StoryboardViewControllerResource<EventDetailsViewController>(identifier: "EventDetails")
      let name = "Main"
      
      func eventDetails(_: Void) -> EventDetailsViewController? {
        return UIStoryboard(resource: self).instantiateViewController(eventDetails)
      }
      
      static func validate() throws {
        if UIImage(named: "Map") == nil { throw ValidationError(description: "[R.swift] Image named 'Map' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "Calendar1") == nil { throw ValidationError(description: "[R.swift] Image named 'Calendar1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "List") == nil { throw ValidationError(description: "[R.swift] Image named 'List' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "ico_back_black") == nil { throw ValidationError(description: "[R.swift] Image named 'ico_back_black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "Time") == nil { throw ValidationError(description: "[R.swift] Image named 'Time' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "ico_star") == nil { throw ValidationError(description: "[R.swift] Image named 'ico_star' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().eventDetails() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'eventDetails' could not be loaded from storyboard 'Main' as 'EventDetailsViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}